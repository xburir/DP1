<!-- index.html -->
<!DOCTYPE html>
<html lang="en">

<head>
    <title>Dashboard</title>
    <link rel="stylesheet" href="style.css">
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css"
        integrity="sha256-p4NxAoJBhIIN+hmNHrzRCf9tD/miZyoHS5obTRR9BMY=" crossorigin="" />
    <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"
        integrity="sha256-20nQCchB9co0qIjJZRGuk2/Z9VM+kNiyxNV1lvTlZBo=" crossorigin=""></script>
    <script src="https://unpkg.com/leaflet-geometryutil"></script>
    <!-- <script src="/leaflet.geometryutil.js"></script> -->
    <script src="/map.js" defer></script>

    <!-- <script src="bundle.js"></script> -->
</head>

<body>

    <div class="side-tools">
        <img src="./icons/account.svg" alt="Account" class="user-image open-user-info">
        <img src="./icons/info.svg" alt="About" id="aboutButton" class="custom-button">
        <img src="./icons/files.svg" alt="Files" class="custom-button" id="open-table-of-files">
        <img src="./icons/upload.svg" alt="Upload Icon" class="custom-button" id="open-upload-table" />
        <img src="./icons/error.svg" alt="Errors" class="custom-button" id="open-errors">
    </div>



    <div class="user-info">
        <img src="./icons/close.svg" alt="close" class="close-user-info">
        <img src="./icons/account.svg" alt="Account" class="user-image">
        <% if (username) { %>
            <p>Welcome, <%= username %>!</p>
            <% } else { %>
                <p>Welcome!</p>
                <% } %>
                    <br>
                    <label>Fit map when toggling route</label>
                    <label class="switch">
                        <input type="checkbox" id="fitMapCheckBox" checked="true"><span class="slider"></span>
                    </label>
                    <br>
                    <form action="/logout" method="POST">
                        <input type=submit value=Logout class="custom-button">
                    </form>
    </div>


    <div class="custom-dialog" id="table-of-files">
        <img src="./icons/close.svg" alt="close" class="close-table-icon" id="close-files">
        <h1 id="list-of-files-header">List of Files</h1>
        <table class="custom-table">
            <thead>
                <tr>
                    <th>File Name</th>
                    <th class="creation-date-collumn">Creation Date</th>
                    <th>Original route</th>
                    <th>Map-matched route</th>
                    <th>Bad map-match</th>
                </tr>
            </thead>
            <tbody id="table-of-files-tbody">
            </tbody>
        </table>
    </div>

    <div class="custom-dialog" id="upload-table">
        <img src="./icons/close.svg" alt="close" class="close-table-icon" id="close-upload-table">
        <h1>Upload routes</h1>



        <span class="label-span">
            <div class="help-marker"><img src="./icons/info.svg" width="18px">
                <div class="help-window">
                    <p>Set the number to indicate the accuracy in meters.</p>
                </div>
            </div> GPS accuracy: <label for="gps_accuracy">5</label>m
        </span>
        <input type="range" id="gps_accuracy" name="gps_accuracy" min="1" max="20" value="5"
            oninput="changeLabel(this)">

        <span class="label-span">
            <div class="help-marker"><img src="./icons/info.svg" width="18px">
                <div class="help-window">
                    <p>Specify the search radius (in meters) within which to search road
                        candidates for each measurement. Note that performance
                        may decrease with a higher search radius value.</p>
                </div>
            </div> Search radius: <label for="search_radius">50</label>m
        </span>
        <input type="range" id="search_radius" name="search_radius" min="1" max="100" value="50"
            oninput="changeLabel(this)">

        <span class="label-span">
            <div class="help-marker"><img src="./icons/info.svg" width="18px">
                <div class="help-window">
                    <p>Penalize turns from one road segment to next. For a pedestrian
                        map-match, you may see a back-and-forth motion along the streets of your path. Try increasing
                        the turn penalty factor to 500 to smooth out jittering of points. Note that if GPS accuracy is
                        already good, increasing this will have a negative affect on your results.</p>
                </div>
            </div>
            Turn penalty: <label for="turn_penalty_factor">200</label>
        </span>
        <input type="range" id="turn_penalty_factor" name="turn_penalty_factor" min="0" max="500" value="200"
            oninput="changeLabel(this)">
        <br><br>
        <input type="file" name="file" accept=".zip" id="fileInput"><br>
        <input type=button value=Upload class="custom-button" id="upload-button">
    </div>

    <div class="custom-dialog" id="table-of-errors">
        <img src="./icons/close.svg" alt="close" class="close-table-icon" id="close-errors">
        <h1>List of Errors</h1>
        <table class="custom-table">
            <thead>
                <tr>
                    <th>File Name</th>
                    <th>Download zip</th>
                    <th>Rerun map-matching</th>
                    <th>Delete zip and unzipped files</th>
                </tr>
            </thead>
            <tbody id="table-of-errors-tbody">
            </tbody>
        </table>
    </div>


    <div id="trackModal">
        <p id="trackModalText"></p>
    </div>

    <!-- Alert dialog box -->
    <div id="alertBox">
        <h2>Alert</h2>
        <p id="alertText">This is the alert message.</p>
        <div id="progressBar">
        </div>
    </div>

    <div id="map"></div>
    <!-- <script type="module" src="map.js"></script> -->
</body>

<script src="/socket.io/socket.io.js"></script>
<script>
    const socket = io();
    var username = '<%= username %>'
    socket.emit('set_username', username);

    // Listen for 'processing_complete' event
    socket.on('processing_complete', (message) => {
        // Handle the processing completion message

        let json = JSON.parse(message)

        if (json.failed > 0) {
            errorString = ""
            for (const key in json.failed_info) {
                if (json.failed_info.hasOwnProperty(key)) {
                    errorString += "\n" + key + " -> " + json.failed_info[key]
                }
            }
            console.log('Processing complete: There was ' + json.failed + ' errors: ' + errorString);
            showAlert('Processing complete: There was ' + json.failed + ' errors, to check the errors, see the console [F12]')
            checkErrors()
        }
        else {
            console.log('Processing complete');
            checkErrors()
            showAlert('Processing completed successfully.')
            let div = document.getElementById("table-of-files")
            if (div.style.display === 'flex') {
                openFiles()
            }
        }
        // You can update the UI or perform any other action here
    });



    socket.on('message', (message) => {
        showAlert(message)
        if (message === "Delete successful.") {
            openErrors()
        }
    });

    function checkErrors() {
        let show = false
        fetch("/list-uploads")  // get directory
            .then(response => {
                if (response.ok) {
                    return response.text()
                }
            }).then(response => {
                ress = JSON.parse(response)
                if (ress.files.length > 0) {
                    show = true
                }
            }).then(_ => {
                fetch("/list-unzipped")  // get directory
                    .then(response => {
                        if (response.ok) {
                            return response.text()
                        }
                    }).then(response => {
                        ress = JSON.parse(response)
                        if (ress.files.length > 0) {
                            show = true
                        }
                    }).then(_ => {
                        if (show) {
                            document.getElementById("open-errors").src = "/public/icons/error-with-dot.svg"
                        } else {
                            document.getElementById("open-errors").src = "/public/icons/error.svg"
                        }
                    })
            })

    }

    checkErrors()

</script>
<script>


    let fitMap = document.getElementById("fitMapCheckBox").checked
    document.getElementById("fitMapCheckBox").addEventListener("change", (event) => {
        fitMap = event.target.checked
    })

    // user info button
    document.getElementsByClassName("close-user-info")[0].addEventListener("click", () => {
        document.getElementsByClassName("user-info")[0].style.display = "none"
    })
    document.getElementsByClassName("user-image")[0].addEventListener("click", () => {
        document.getElementsByClassName("user-info")[0].style.display = "flex"
        document.getElementById("upload-table").style.display = "none"
        document.getElementById("table-of-errors").style.display = "none"
        document.getElementById("table-of-files").style.display = "none"
    })

    // files uploaded button
    document.getElementById("close-files").addEventListener("click", () => {
        document.getElementById("table-of-files").style.display = "none"
    })
    function openFiles() {
        document.getElementById("table-of-files").style.display = "flex"
        let table = document.getElementById("table-of-files-tbody")
        let header = document.getElementById("list-of-files-header").innerHTML = "List of files"
        document.querySelector(".creation-date-collumn").style.display = "block"
        table.innerHTML = ""

        let username = '<%= username %>'
        fetch("/list-files")  // get directory
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                return response.text();
            }).then(response => {
                ress = JSON.parse(response)
                ress.files.forEach((file) => {
                    let row = document.createElement("tr")

                    let name = document.createElement("td")
                    name.innerHTML = file.name
                    name.addEventListener("click", function () {
                        openRoutes(file.name, username)
                    })
                    name.style.cursor = "pointer"

                    let date = document.createElement("td")
                    date.classList.add("creation-date-collumn")
                    date.innerHTML = file.lastModified

                    let originalSwitchTD = document.createElement("td")
                    let originalSwitchLabel = document.createElement("label")
                    originalSwitchTD.appendChild(originalSwitchLabel)
                    originalSwitchLabel.classList.add("switch")
                    let originalSwitch = document.createElement("input")
                    originalSwitch.onchange = function () {
                        toggleFile(file.name, username, "original", originalSwitch)
                    }
                    originalSwitch.type = "checkbox"
                    let originalSwitchSpan = document.createElement("span")
                    originalSwitchSpan.classList.add("slider")
                    originalSwitchLabel.appendChild(originalSwitch)
                    originalSwitchLabel.appendChild(originalSwitchSpan)

                    let matchedSwitchTD = document.createElement("td")
                    let matchedSwitchLabel = document.createElement("label")
                    matchedSwitchTD.appendChild(matchedSwitchLabel)
                    matchedSwitchLabel.classList.add("switch")
                    let matchedSwitch = document.createElement("input")
                    matchedSwitch.onchange = function () {
                        toggleFile(file.name, username, "map-match", matchedSwitch)
                    }
                    matchedSwitch.type = "checkbox"
                    let matchedSwitchSpan = document.createElement("span")
                    matchedSwitchSpan.classList.add("slider")
                    matchedSwitchLabel.appendChild(matchedSwitch)
                    matchedSwitchLabel.appendChild(matchedSwitchSpan)



                    let warnTD = document.createElement("td")
                    let warnImage = document.createElement("img")
                    warnTD.appendChild(warnImage)
                    warnImage.src = "/public/icons/error.svg"
                    warnImage.style.cursor = "pointer"
                    warnImage.addEventListener("click", () => {
                        fetch("/warn/" + username + "/" + file.name)
                    })


                    let routesForFile = []
                    fetch("/list-routes/" + file.name).then(response => {
                        if (!response.ok) {
                            throw new Error('Network response was not ok');
                        }
                        return response.text();
                    }).then(text => {
                        let ress = JSON.parse(text)
                        ress.files.forEach((route) => {
                            routesForFile.push(route.name)
                        })
                    }).then(_ => {

                        if (checkIfAllRoutesFromFileAreShown(file.name, routesForFile, "original")) {
                            originalSwitch.checked = true
                        } else {
                            originalSwitch.checked = false
                        }

                        if (checkIfAllRoutesFromFileAreShown(file.name, routesForFile, "map-match")) {
                            matchedSwitch.checked = true
                        } else {
                            matchedSwitch.checked = false
                        }
                    })

                    row.appendChild(name)
                    row.appendChild(date)
                    row.appendChild(originalSwitchTD)
                    row.appendChild(matchedSwitchTD)
                    row.appendChild(warnTD)
                    table.appendChild(row)
                })
            })
    }
    document.getElementById("open-table-of-files").addEventListener("click", () => {
        document.getElementsByClassName("user-info")[0].style.display = "none"
        document.getElementById("table-of-errors").style.display = "none"
        document.getElementById("upload-table").style.display = "none"
        document.getElementById("table-of-files").style.display = "flex"
        openFiles()
    })

    // open upload table button
    document.getElementById("close-upload-table").addEventListener("click", () => {
        document.getElementById("upload-table").style.display = "none"
    })
    document.getElementById("open-upload-table").addEventListener("click", () => {
        document.getElementById("upload-table").style.display = "flex"
        document.getElementsByClassName("user-info")[0].style.display = "none"
        document.getElementById("table-of-errors").style.display = "none"
        document.getElementById("table-of-files").style.display = "none"
    })
    document.getElementById("upload-button").addEventListener("click", () => {
        const fileInput = document.getElementById("fileInput");
        const gpsAccuracy = document.getElementById("gps_accuracy");
        const searchRadius = document.getElementById("search_radius");
        const turnPenalty = document.getElementById("turn_penalty_factor");
        if (fileInput.files.length > 0) {
            const formData = new FormData();
            formData.append("file", fileInput.files[0]);
            const params = { gps_accuracy: gpsAccuracy.value, search_radius: searchRadius.value, turn_penalty_factor: turnPenalty.value }
            formData.append("params", JSON.stringify(params))
            fetch("/upload", {
                method: "POST",
                body: formData
            })
            fileInput.value = ""
            document.getElementById("upload-table").style.display = "none"
        } else {
            showAlert("Upload a ZIP file.")
        }
    })
    function changeLabel(event) {
        var labelElement = document.querySelector('label[for="' + event.id + '"]');
        labelElement.innerHTML = event.value
    }

    // about button
    document.getElementById("aboutButton").addEventListener("click", () => {
        window.location.href = "./about";
    })

    // errors button
    function openErrors() {
        checkErrors()
        let table = document.getElementById("table-of-errors-tbody")
        table.innerHTML = ""

        let added = []

        let username = '<%= username %>'

        fetch("/list-unzipped")  // get directory
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                return response.text();
            }).then(response => {
                ress = JSON.parse(response)
                ress.files.forEach((file) => {
                    let row = document.createElement("tr")

                    let name = document.createElement("td")
                    name.innerHTML = file.name
                    added.push(file.name)

                    let downloadZip = document.createElement("td")
                    fetch("/uploads/" + username + "/" + file.name + ".zip").then(response => {
                        if (!response.ok) {
                            downloadZip.innerHTML = "ZIP not found"
                        } else {
                            let downloadA = document.createElement("a")
                            let downloadImage = document.createElement("img")
                            downloadA.appendChild(downloadImage)
                            downloadImage.src = "/public/icons/download.svg"
                            downloadZip.appendChild(downloadA)
                            downloadZip.style.cursor = "pointer"
                            downloadA.href = "/uploads/" + username + "/" + file.name + ".zip"
                        }
                    })

                    let rerun = document.createElement("td")
                    let rerunImage = document.createElement("img")
                    rerunImage.src = "/public/icons/refresh.svg"
                    rerunImage.style.cursor = "pointer"
                    rerun.appendChild(rerunImage)
                    rerunImage.addEventListener("click", () => {
                        fetch("/mapmatch/" + username + "/" + file.name)
                    })

                    let deletetd = document.createElement("td")
                    let deleteFolderImage = document.createElement("img")
                    deleteFolderImage.src = "/public/icons/folder.svg"
                    deleteFolderImage.style.cursor = "pointer"
                    deleteFolderImage.addEventListener("click", () => {
                        fetch("/delete" + "/uploads/" + username + "/unzipped/" + file.name)
                    })
                    deletetd.appendChild(deleteFolderImage)
                    fetch("list-uploads").then(response => {   // get zips
                        if (!response.ok) {
                            throw new Error('Network response was not ok');
                        }
                        return response.text()
                    }).then(response => {
                        subress = JSON.parse(response)
                        subress.files.forEach((subfile) => {
                            if (subfile.name.replace(/\.[^/.]+$/, "") === file.name) {
                                let deleteZipImage = document.createElement("img")
                                deleteZipImage.src = "/public/icons/zip.svg"
                                deleteZipImage.style.cursor = "pointer"
                                deleteZipImage.addEventListener("click", () => {
                                    fetch("/delete" + "/uploads/" + username + "/" + subfile.name)
                                })
                                deletetd.appendChild(deleteZipImage)
                            }
                        })
                    })

                    row.appendChild(name)
                    row.appendChild(downloadZip)
                    row.appendChild(rerun)
                    row.appendChild(deletetd)
                    table.appendChild(row)
                })

                fetch("list-uploads")
                    .then(response => {
                        if (!response.ok) {
                            throw new Error('Network response was not ok');
                        }
                        return response.text()
                    }).then(response => {
                        ress = JSON.parse(response)
                        ress.files.forEach((file) => {
                            let filewithoutextension = file.name.replace(/\.[^/.]+$/, "")
                            if (!added.includes(filewithoutextension)) {

                                let row = document.createElement("tr")

                                let name = document.createElement("td")
                                name.innerHTML = file.name

                                let downloadZip = document.createElement("td")
                                let downloadA = document.createElement("a")
                                let downloadImage = document.createElement("img")
                                downloadA.appendChild(downloadImage)
                                downloadImage.src = "/public/icons/download.svg"
                                downloadZip.appendChild(downloadA)
                                downloadZip.style.cursor = "pointer"
                                downloadA.href = "/uploads/" + username + "/" + file.name + ".zip"

                                let rerun = document.createElement("td")

                                let deletetd = document.createElement("td")
                                let deleteZipImage = document.createElement("img")
                                deleteZipImage.src = "/public/icons/zip.svg"
                                deleteZipImage.style.cursor = "pointer"
                                deleteZipImage.addEventListener("click", () => {
                                    fetch("/delete" + "/uploads/" + username + "/" + file.name)
                                })
                                deletetd.appendChild(deleteZipImage)

                                row.appendChild(name)
                                row.appendChild(downloadZip)
                                row.appendChild(rerun)
                                row.appendChild(deletetd)
                                table.appendChild(row)
                            }
                        }


                        );
                    });
            })
    }
    document.getElementById("open-errors").addEventListener("click", () => {
        document.getElementsByClassName("user-info")[0].style.display = "none"
        document.getElementById("upload-table").style.display = "none"
        document.getElementById("table-of-errors").style.display = "flex"
        document.getElementById("table-of-files").style.display = "none"
        openErrors()
    })
    document.getElementById("close-errors").addEventListener("click", () => {
        document.getElementById("table-of-errors").style.display = "none"
    })

    function showAlert(message) {
        var alertBox = document.getElementById("alertBox");
        var alertText = document.getElementById("alertText");
        var progress = document.getElementById("progress");

        // Set the alert message
        alertText.textContent = message;

        // Show the alert box
        alertBox.style.display = "flex";

        // Hide the alert box after countdown
        setTimeout(function () {
            alertBox.style.display = "none";
        }, 3000);
    }

</script>

</html>